package simple;

require kermeta
using kermeta::standard
using kermeta::exceptions


enumeration coolEnum { one; two; three; }

class A
{

    operation useBParam(b : B) is
    do
        stdio.writeln("Appel useBParam de la classe simple::A : "+b.toString)
    end

    operation sayHelloA() is
    do
        stdio.writeln("Appel sayHello de la classe simple::A")
    end


	operation testContracts(i : Integer) : Integer
	    
	    // Declaration of the pre-condition
	    pre weirdInput is do
		i<100
	    end

	    // Declaration of the post-condition
	    post weirdOutput is
		result>4

	is
	    do
		stdio.writeln("Appel testContracts de la classe simple::A avec "+i.toString)
		result := testContracts2(i)
	    end




	operation testContracts2(i : Integer) : Integer
	    
	    // Declaration of the pre-condition
	    pre weirdInput2 is do
		i>1
	    end

	    // Declaration of the post-condition
	    post weirdOutput2 is
		result<25
	is
	    do
		stdio.writeln("Appel testContracts2 de la classe simple::A avec "+i.toString)
		result := i+1
	    end





	
    operation printInteger(i : Integer) is
    do
        stdio.writeln("Appel printInteger de la classe simple::A avec pour parametre "+i.toString)
    end

	operation useEnum(e :coolEnum) is
	do
		 stdio.writeln("Appel useEnum de la classe simple::A avec "+e.toString)
	end
}




class B inherits A {

    attribute number : Integer

    operation sayHelloB() is
    do
        //stdio.writeln("Appel sayHello de la classe simple::B (number = "+number.toString+")")
	stdio.writeln("Appel sayHello de la classe simple::B ("+self.toString+")")
	self.makeException
    end


    operation makeException() is
    do
        stdio.writeln("Appel makeException de la classe simple::B")
	var excep : Exception
   	excep := Exception.new
   	stdio.writeln("Throwing an exception ! ")
   	raise excep
    end

    operation makeDangerousDivision(i : Integer) is
    do
        stdio.writeln("Appel makeDangerousDivision de la classe simple::B : "+i.toString)
	5/i
    end

    operation callMakeDangerousDivision(i : Integer) is
    do
	stdio.writeln("Appel callMakeDangerousDivision de la classe simple::B : "+i.toString)
        makeDangerousDivision(i)
    end

    operation infiniteLoop() is
    do
	from var i : Integer init 1
	until i == 0
	loop
	    i := i + 1
	end
    end

    operation doNothing() is
    do
        1+1
    end

    method toString() : String is
    do
        result := "Objet B (number = "+number.toString+")"
    end

}
